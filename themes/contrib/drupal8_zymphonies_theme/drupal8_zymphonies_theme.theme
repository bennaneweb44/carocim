<?php

/**
 * @file
 * Contains theme override functions and preprocess functions
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\file\Entity\File;

/**
 * Implements hook_preprocess_page() for block templates.
 */

function drupal8_zymphonies_theme_preprocess_page(&$variables) {

  // Add Responsive class for Top Widget.
  if (!empty($variables['page']['topwidget_first']) && !empty($variables['page']['topwidget_second']) && !empty($variables['page']['topwidget_third'])) {
    $variables['topwidget_class'] = 'col-md-4';
    $variables['topwidget_third_class'] = 'col-md-4';
  }
  elseif((!empty($variables['page']['topwidget_first']) && !empty($variables['page']['topwidget_second'])) or (!empty($variables['page']['topwidget_first']) && !empty($variables['page']['topwidget_third'])) or (!empty($variables['page']['topwidget_third']) && !empty($variables['page']['topwidget_second']))) {
    $variables['topwidget_class'] = 'col-md-6';
    $variables['topwidget_third_class'] = 'col-md-6';
  }
  else {
    $variables['topwidget_class'] = 'col-md-12';
  }

  // Add Responsive class for Middle Widget.
  if (!empty($variables['page']['middle_first']) && !empty($variables['page']['middle_second']) && !empty($variables['page']['middle_third'])) {
    $variables['middle_class'] = 'col-md-4';
    $variables['middle_third_class'] = 'col-md-4';
  }
  elseif((!empty($variables['page']['middle_first']) && !empty($variables['page']['middle_second'])) or (!empty($variables['page']['middle_first']) && !empty($variables['page']['middle_third'])) or (!empty($variables['page']['middle_third']) && !empty($variables['page']['middle_second']))) {
    $variables['middle_class'] = 'col-md-6';
    $variables['middle_third_class'] = 'col-md-6';
  }
  else {
    $variables['middle_class'] = 'col-md-12';
  }

  // Add Responsive class for Bottom Widget.
  if (!empty($variables['page']['bottom_first']) && !empty($variables['page']['bottom_second']) && !empty($variables['page']['bottom_third']) && !empty($variables['page']['bottom_forth'])) {
    $variables['bottom_class'] = 'col-md-3';
  }
  else if (!empty($variables['page']['bottom_first']) && !empty($variables['page']['bottom_second']) && !empty($variables['page']['bottom_third'])) {
    $variables['bottom_class'] = 'col-md-4';
  }
  else if((!empty($variables['page']['bottom_first']) && !empty($variables['page']['bottom_second'])) or (!empty($variables['page']['bottom_first']) && !empty($variables['page']['bottom_third'])) or (!empty($variables['page']['bottom_third']) && !empty($variables['page']['bottom_second']))) {
    $variables['bottom_class'] = 'col-md-6';
  }
  else {
    $variables['bottom_class'] = 'col-md-12';
  }

  // Add Responsive class for footer.
  if (!empty($variables['page']['footer_first']) && !empty($variables['page']['footer_second']) && !empty($variables['page']['footer_third'])) {
    $variables['footer_class'] = 'col-md-3';
    $variables['footer_third_class'] = 'col-md-6';
  }
  elseif((!empty($variables['page']['footer_first']) && !empty($variables['page']['footer_second'])) or (!empty($variables['page']['footer_first']) && !empty($variables['page']['footer_third'])) or (!empty($variables['page']['footer_third']) && !empty($variables['page']['footer_second']))) {
    $variables['footer_class'] = 'col-md-6';
    $variables['footer_third_class'] = 'col-md-6';
  }
  else {
    $variables['footer_class'] = 'col-md-12';
  }

  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['contentlayout'] = 'col-md-6';
    $variables['sidebarfirst'] = 'col-md-3';
    $variables['sidebarsecond'] = 'col-md-3';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['contentlayout'] = 'col-md-9 ';
    $variables['sidebarfirst'] = 'col-md-3';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['contentlayout'] = 'col-md-9';
    $variables['sidebarsecond'] = 'col-md-3';
  }
  else {
    $variables['contentlayout'] = 'col-md-12';
  }

  // Social media global variable.
  $variables['show_social_icon'] = theme_get_setting('show_social_icon');
  $variables['facebook_url'] = theme_get_setting('facebook_url');
  $variables['google_plus_url'] = theme_get_setting('google_plus_url');
  $variables['twitter_url'] = theme_get_setting('twitter_url');
  $variables['linkedin_url'] = theme_get_setting('linkedin_url');
  $variables['pinterest_url'] = theme_get_setting('pinterest_url');
  $variables['rss_url'] = theme_get_setting('rss_url');
  $variables['copyright_text'] = theme_get_setting('copyright_text');
  $variables['show_credit_link'] = theme_get_setting('show_credit_link');

  // To get the current URL
  $current_url  = \Drupal::request()->getRequestUri();

  $variables['current_path'] = '/';

  if ($current_url != '/') {
    $current_path = explode("/", $current_url);
    $variables['current_path'] = $current_path[1];
  }

  // Slider
  // Assign Variable for slider
  if ($variables['is_front']) {
    if (theme_get_setting('show_slideshow','drupal8_zymphonies_theme') == 1) {
      $variables['show_slideshow'] = 1;
      $variables['slider_content'] = drupal8_zymphonies_theme_get_slider_content();
    }
  }

}

/**
 * Implements hook_preprocess_menu().
 */
function drupal8_zymphonies_theme_preprocess_menu(&$variables, $hook) {
  if ($hook == 'menu__main') { // We're doing that for main menu.
    // Get the current path.
    $current_path = \Drupal::request()->getRequestUri();
    $items = $variables['items'];
    foreach ($items as $key => $item) {
      // If path is current_path, set active to li.
      if ($item['url']->toString() == $current_path) {
      // Add active link.
      $variables['items'][$key]['attributes']['class'] = 'active';
      }
    }
  }
}

/**
 * Slider
 * Implements custom function for get slider content.
 */
function drupal8_zymphonies_theme_get_slider_content() {
  $slider_content = array();
  for ($i = 1; $i <= theme_get_setting('no_of_slides'); $i++) {
    $fid = theme_get_setting('slide_image_path'.$i,'drupal8_zymphonies_theme');
    if (!empty($fid)) {
      $file = file_load($fid[0]);
      $uri = $file->getFileUri();
      $path = file_create_url($uri);
    }
    else {
      $path = base_path() . drupal_get_path('theme', 'drupal8_zymphonies_theme') . theme_get_setting('slide_image_path_' . $i, 'drupal8_zymphonies_theme');
    }
    $slider_content[$i] = '<li>
      <img src="' . $path . '" alt="Slider Banner" />      
      <div class="slider-caption">
        <h2 class="slider-title">' . theme_get_setting('slide_title_' . $i, 'drupal8_zymphonies_theme').'</h2>
        <div class="clearfix">
          <p class="slider-description">' . theme_get_setting('slide_description_' . $i, 'drupal8_zymphonies_theme').'</p>
        </div>        
      </div>
    </li>';
    /*
      <a href=' . theme_get_setting('slide_url_' . $i, 'drupal8_zymphonies_theme') . ' class="more-link">Lire la suite</a>
    */
  }
  /**************************************************** Lire la suite du Slider *********************************************************
    <div class="slider-caption">
      <h2 class="slider-title">' . theme_get_setting('slide_title_' . $i, 'drupal8_zymphonies_theme').'</h2>
      <div class="clearfix"><p class="slider-description">' . theme_get_setting('slide_description_' . $i, 'drupal8_zymphonies_theme').'</p></div>
      <a href=' . theme_get_setting('slide_url_' . $i, 'drupal8_zymphonies_theme') . ' class="more-link">Lire la suite</a>
    </div> 
  */
  return $slider_content;
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function drupal8_zymphonies_theme_form_system_theme_settings_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {

  //Slide show configure
  $form['drupal8_zymphonies_theme_settings']['slideshow'] = array(
    '#type' => 'details',
    '#title' => t('Front page slideshow'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['drupal8_zymphonies_theme_settings']['slideshow']['no_of_slides'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of slides'),
    '#default_value' => theme_get_setting('no_of_slides'),
    '#description'  => t("Enter the number of slides required & Save configuration"),
    '#markup' => '<div class="messages messages--warning">Clear caches after making any changes in theme settings. <a href="../../config/development/performance">Click here to clear cache</a></div>',
  );
  $form['drupal8_zymphonies_theme_settings']['slideshow']['show_slideshow'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Slideshow'),
    '#default_value' => theme_get_setting('show_slideshow'),
    '#description'   => t("Show/Hide Slideshow in home page"),
  );
  $form['drupal8_zymphonies_theme_settings']['slideshow']['slide'] = array(
    '#markup' => t('Change the banner image, title, description and link using below fieldset'),
  );

  for ($i = 1; $i <= theme_get_setting('no_of_slides'); $i++) {
    $form['drupal8_zymphonies_theme_settings']['slideshow']['slide' . $i] = array(
      '#type' => 'details',
      '#title' => t('Slide '.$i),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['drupal8_zymphonies_theme_settings']['slideshow']['slide' . $i]['slide_image_path' . $i] = array(
      '#type' => 'managed_file',
      '#title' => t('Slide '.$i.' Image'),
      '#default_value' => theme_get_setting('slide_image_path'.$i,'drupal8_zymphonies_theme'),
      '#upload_location' => 'public://',
    );
    $form['drupal8_zymphonies_theme_settings']['slideshow']['slide' . $i]['slide_title_' . $i] = array(
      '#type' => 'textfield',
      '#title' => t('Slide '.$i.' Title'),
      '#default_value' => theme_get_setting('slide_title_' . $i,'drupal8_zymphonies_theme'),
    );
    $form['drupal8_zymphonies_theme_settings']['slideshow']['slide' . $i]['slide_description_' . $i] = array(
      '#type' => 'textarea',
      '#title' => t('Slide '.$i.' Description'),
      '#default_value' => theme_get_setting('slide_description_' . $i,'drupal8_zymphonies_theme'),
    );
    $form['drupal8_zymphonies_theme_settings']['slideshow']['slide' . $i]['slide_url_' . $i] = array(
      '#type' => 'textfield',
      '#title' => t('Slide '.$i.' URL'),
      '#default_value' => theme_get_setting('slide_url_' . $i,'drupal8_zymphonies_theme'),
    );

    // Make the uploaded images permanent.
    $image = theme_get_setting('slide_image_path'.$i,'drupal8_zymphonies_theme');
    if(!empty($image)){
      $file = File::load($image[0]);
      $file->status = FILE_STATUS_PERMANENT;
      $file->save();
      $file_usage = \Drupal::service('file.usage');
      $file_usage_check = $file_usage->listUsage($file);
      if (empty($file_usage_check)) {
        $file_usage->add($file, 'drupal8_zymphonies_theme', 'theme', $image[0]);
      }
    }

  }

  //Social Icon Link
  $form['drupal8_zymphonies_theme_settings']['social_icon'] = array(
    '#type' => 'details',
    '#title' => t('Social Media Link'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['drupal8_zymphonies_theme_settings']['social_icon']['show_social_icon'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Social Icons'),
    '#default_value' => theme_get_setting('show_social_icon'),
    '#description'   => t("Show/Hide social media links"),
  );
  $form['drupal8_zymphonies_theme_settings']['social_icon']['facebook_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook Link'),
    '#default_value' => theme_get_setting('facebook_url'),
  );
  $form['drupal8_zymphonies_theme_settings']['social_icon']['google_plus_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Google plus Link'),
    '#default_value' => theme_get_setting('google_plus_url'),
  );
  $form['drupal8_zymphonies_theme_settings']['social_icon']['twitter_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Twitter Link'),
    '#default_value' => theme_get_setting('twitter_url'),
  );
  $form['drupal8_zymphonies_theme_settings']['social_icon']['linkedin_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Linkedin Link'),
    '#default_value' => theme_get_setting('linkedin_url'),
  );
  $form['drupal8_zymphonies_theme_settings']['social_icon']['pinterest_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Pinterest Link'),
    '#default_value' => theme_get_setting('pinterest_url'),
  );
  $form['drupal8_zymphonies_theme_settings']['social_icon']['rss_url'] = array(
    '#type' => 'textfield',
    '#title' => t('RSS Link'),
    '#default_value' => theme_get_setting('rss_url'),
  );
  $form['drupal8_zymphonies_theme_settings']['copyright'] = array(
    '#type' => 'details',
    '#title' => t('Copyright'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['drupal8_zymphonies_theme_settings']['copyright']['copyright_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter copyright text'),
    '#default_value' => theme_get_setting('copyright_text'),
  );

  //Show/Hide credit
  $form['drupal8_zymphonies_theme_settings']['credit_link'] = array(
    '#type' => 'details',
    '#title' => t('Credit'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['drupal8_zymphonies_theme_settings']['credit_link']['show_credit_link'] = array(
    '#type' => 'checkbox',
    '#title' => t("Show/Hide credit text"),
    '#default_value' => theme_get_setting('show_credit_link'),
    '#description'   => t("Zymphonies recommend you to display credit in footer"),
  );

}

/************************************************************************************************************/
/********************************** Custom preprocess for CAROCIM  ******************************************/
/************************************************************************************************************/

function drupal8_zymphonies_theme_form_alter(&$form, &$form_state, $form_id) {
  
  // formulaire de recherche
  if ($form_id == 'search_block_form') { 
    $form['actions']['submit']['#value'] = 'Rechercher';
  }

  // formulaire de contact
  if (strpos($form_id, 'contact_message_') !== FALSE) {
    $form['actions']['preview']['#access'] = FALSE;
  }
}

function drupal8_zymphonies_theme_form_search_block_form_alter(&$form, FormStateInterface $form_state) {
  $form['keys']['#attributes']['placeholder'] = 'Nom du carreau, catégories, ...etc';
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 */
function drupal8_zymphonies_theme_preprocess_views_view_unformatted__nos_coups_de_coeur(&$variables) {
  if (isset($variables['view'])) {
    $view = $variables['view'];
    
    if ($view->current_display == "block_1") {

      $nids = \Drupal::entityQuery('node')
      ->condition('type', 'carreau')
      ->condition('status', '1')
      ->condition('promote', '1')
      ->pager(8, false)
      ->sort('changed', 'DESC')
      ->execute();

      $nodes = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadMultiple($nids);
      
      $variables['carreaux'] = [];      
      foreach($nodes as $node) {
        if ($node instanceof Drupal\node\Entity\Node) {
          $std = new \stdClass();

          // Id
          $std->id = $node->id();

          // Nom carreau
          $nomCarreau = $node->get('title')->getValue()[0]['value'];
          $std->nomCarreau = $nomCarreau;

          // Miniature
          $std->imageCarreau = '';
          if (is_array($node->get('field_miniature_carreau')->getValue()) && count($node->get('field_miniature_carreau')->getValue())) {
            $id_image = $node->get('field_miniature_carreau')->getValue()[0]['target_id'];                    
            $miniature = File::load($id_image);
            $std->imageCarreau = $miniature->url();
          }

          // Rendu final
          $std->renduFinalCarreau = '';
          if (is_array($node->get('field_rendu_final')->getValue()) && count($node->get('field_rendu_final')->getValue())) {                        
            $id_rendu_final = $node->get('field_rendu_final')->getValue()[0]['target_id'];                    
            $rendu_final = File::load($id_rendu_final);
            $std->renduFinalCarreau = $rendu_final->url();
          }

          // Miniature existante mais pas de rendu
          if ($std->imageCarreau != '' && $std->renduFinalCarreau == '') {
            $std->renduFinalCarreau = $std->imageCarreau;
          }

          $variables['carreaux'][] = $std;          
        }
      } 
      
    }
  }
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 */
function drupal8_zymphonies_theme_preprocess_views_view_unformatted(&$variables) {

  $vuesCollections = ['les_unis', 'les_frises', 'motifs_florales', 'motifs_anciens', 'formes_geometriques'];
  $vuesGammes = ['10_x_20_cm', '20_x_20_cm', '15_x_15_cm', 'hexagonal', 'plinthes'];
  
  if (isset($variables['view'])) {
    $view = $variables['view'];    
    
    if ( (in_array($view->id(), $vuesCollections) || in_array($view->id(), $vuesGammes)) && 
        $view->current_display == "page_1") {
      
      $nids = \Drupal::entityQuery('node')
      ->condition('type', 'carreau')
      ->condition('status', '1')
      ->execute();

      $nodes = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->loadMultiple($nids);
      
      $variables['carreaux'] = [];      
      foreach($nodes as $node) {
        if ($node instanceof Drupal\node\Entity\Node) {
          $std = new \stdClass();

          // Id
          $std->id = $node->id();

          // Nom carreau
          $nomCarreau = $node->get('title')->getValue()[0]['value'];
          $std->nomCarreau = $nomCarreau;

          // Miniature
          $std->imageCarreau = '';
          if (is_array($node->get('field_miniature_carreau')->getValue()) && count($node->get('field_miniature_carreau')->getValue())) {
            $id_image = $node->get('field_miniature_carreau')->getValue()[0]['target_id'];                    
            $miniature = File::load($id_image);
            $std->imageCarreau = $miniature->url();
          }

          // Rendu final
          $std->renduFinalCarreau = '';
          if (is_array($node->get('field_rendu_final')->getValue()) && count($node->get('field_rendu_final')->getValue())) {                        
            $id_rendu_final = $node->get('field_rendu_final')->getValue()[0]['target_id'];                    
            $rendu_final = File::load($id_rendu_final);
            $std->renduFinalCarreau = $rendu_final->url();
          }

          // Miniature existante mais pas de rendu
          if ($std->imageCarreau != '' && $std->renduFinalCarreau == '') {
            $std->renduFinalCarreau = $std->imageCarreau;
          }

          $variables['carreaux'][] = $std;          
        }
      } 
    }
  }
}

/**
 * Implements template_preprocess_paragraph().
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - paragraph: The paragraph object.
 *   - view_mode: View mode; e.g., 'full', 'teaser'...
 */

function drupal8_zymphonies_theme_preprocess_paragraph(&$variables) {

  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  if ($variables['paragraph'] instanceof Drupal\paragraphs\Entity\Paragraph) {
    $paragraph = Drupal\paragraphs\Entity\Paragraph::load($variables['paragraph']->id());
    $variables['resume'] = $paragraph->get('field_resume')->value;
    $variables['texte'] = $paragraph->get('field_texte')->value;
    $variables['titre'] = $paragraph->get('field_titre')->value;

    // image
    $idImage = $paragraph->get('field_image')->target_id;
    $miniature = File::load($idImage);
    $variables['image'] = $miniature->url();
  }
}
  
/**
 * Implements hook_form_FORM_ID_alter().
 */
function drupal8_zymphonies_theme_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    $form['actions']['submit']['#value'] = 'Filtrer';    
  }
}


function drupal8_zymphonies_theme_preprocess_views_exposed_form(&$variables) {
  $form =& $variables['form'];

  if (!empty($form['q'])) {
    $variables['q'] = $form['q'];
  }

  foreach ($form['#info'] as $info) {
    if (!empty($info['label'])) {
      $form[$info['value']]['#title'] = $info['label'];
    }
    if (!empty($info['description'])) {
      $form[$info['value']]['#description'] = $info['description'];
    }
  }

  $formats = $variables['form']['format']['#options'];  
  $currentPath = \Drupal::request()->getRequestUri();

  $options = [];
  $variables['current_filter'] = 'Tous';
  foreach($formats as $key => $value) {
    if ($value instanceof TranslatableMarkup) {
      $std = new \stdClass();
      $std->lien = '?format='.$key;
      $std->texte = $value->render();
      
      if (strpos($currentPath, $std->lien) !== false) {
        $variables['current_filter'] = $std->texte;
      }

      $options[] = $std;
    }
  }

  if (count($options)) {
    $variables['options'] = $options;        
  }
}